{
  "permissions": {
    "allow": [
      "Bash(node:*)",
      "Bash(npm --version)",
      "Bash(npm install)",
      "Bash(psql:*)",
      "Bash(npm install:*)",
      "Bash(mv:*)",
      "Bash(rm:*)",
      "Bash(npx tsc:*)",
      "Bash(npm start)",
      "Bash(PORT=3000 npm start)",
      "Bash(PORT=3005 npm start)",
      "Bash(curl:*)",
      "Bash(mkdir:*)",
      "Bash(PORT=3006 npx tsc)",
      "Bash(PORT=3006 npm start)",
      "Bash(PORT=3007 npm start)",
      "Bash(npm run test:*)",
      "Bash(npm run lint)",
      "Bash(npm test)",
      "Bash(npm test:*)",
      "Bash(grep:*)",
      "Bash(npm run build:all:*)",
      "Bash(npm run install:all:*)",
      "Bash(timeout:*)",
      "Bash(npm run build:*)",
      "Bash(npm run validate:*)",
      "Bash(move:*)",
      "Bash(dir scriptswindowsstart-all.bat)",
      "Bash(dir:*)",
      "Bash(cmd /c:*)",
      "Bash(scriptswindowsstart-all.bat)",
      "Bash(powershell:*)",
      "Bash(npm cache clean:*)",
      "Bash(where pg_isready)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\pg_isready.exe\" -h localhost -p 5432)",
      "Bash(start cmd /c:*)",
      "Bash(taskkill:*)",
      "Bash(set PORT=3005)",
      "Bash(set PORT=3006)",
      "Bash(where redis-cli)",
      "Bash(where redis-server)",
      "Bash(sc query:*)",
      "Bash(wmic service:*)",
      "Bash(findstr:*)",
      "Bash(npm run stop:all:*)",
      "Bash(stop-all.bat)",
      "Bash(scriptswindowsstop-all.bat)",
      "Bash(npm run import:*)",
      "Bash(npm run:*)",
      "Bash(start http://localhost:3000/login)",
      "Bash(tasklist:*)",
      "Bash(\"scripts\\windows\\stop-all.bat\")",
      "Bash(\"scripts\\windows\\start-all.bat\")",
      "Bash(start http://localhost:3000)",
      "Bash(\"scripts\\windows\\setup-database.bat\")",
      "Bash(del run-migrations.js)",
      "Bash(cat:*)",
      "Bash(npm ls:*)",
      "Bash(PORT=3006 npm run dev)",
      "Bash(C:codemangalmscriptswindowsstop-all.bat)",
      "Bash(\"C:\\code\\mangalm\\scripts\\windows\\stop-all.bat\")",
      "Bash(start http://localhost:3000/stores)",
      "Bash(start http://localhost:3000/stores/4261931000001048015)",
      "Bash(start http://localhost:3000/stores/4261931000001048016)",
      "Bash(find:*)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -l)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"\\d predicted_orders\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT 1\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"\\d predicted_order_items\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"\\d call_prioritization\")",
      "Bash(start http://localhost:3000/stores/4261931000000166057)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT s.id, s.name, COUNT(hi.id) as order_count, MAX(hi.invoice_date) as last_order_date FROM stores s LEFT JOIN historical_invoices hi ON s.id = hi.store_id GROUP BY s.id ORDER BY s.name LIMIT 5\")",
      "Bash(PORT=3001 npm start)",
      "Bash(set REACT_APP_API_GATEWAY_URL=http://localhost:3003)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT COUNT(*) FROM predicted_orders\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT id, store_id, status, prediction_date FROM predicted_orders LIMIT 5\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT id, store_id, status, predicted_date FROM predicted_orders LIMIT 5\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -f \"C:\\code\\mangalm\\database\\scripts\\generate-predictions.sql\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT po.store_id, s.name, po.predicted_date, po.confidence, po.total_amount, COUNT(poi.id) as item_count FROM predicted_orders po JOIN stores s ON po.store_id = s.id LEFT JOIN predicted_order_items poi ON po.id = poi.predicted_order_id WHERE po.status = ''pending'' GROUP BY po.store_id, s.name, po.predicted_date, po.confidence, po.total_amount ORDER BY po.confidence DESC, po.predicted_date ASC LIMIT 10\")",
      "Bash(start \"API Gateway\" cmd /c \"npm start\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT column_name, data_type FROM information_schema.columns WHERE table_name = ''predicted_order_items''\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT column_name FROM information_schema.columns WHERE table_name = ''products'' LIMIT 10\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT id FROM predicted_orders LIMIT 1\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT COUNT(*) FROM document_uploads\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -f \"C:\\code\\mangalm\\database\\migrations\\009_create_document_processing_tables.sql\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"\\d stores\")",
      "WebSearch",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -f \"C:\\code\\mangalm\\database\\migrations\\sales\\20250821_create_orders_table.ts\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -f \"C:\\code\\mangalm\\database\\migrations\\sales\\20250821_create_orders_table.sql\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"INSERT INTO orders (order_number, store_id, customer_name, customer_phone, customer_email, items, item_count, total_quantity, subtotal_amount, tax_amount, total_amount, totals, created_by, extraction_confidence, data_quality_score, manual_verification_required, source) VALUES (''MNG-2025-001'', ''4261931000001048015'', ''Rajesh Kumar'', ''+91-9876543210'', ''rajesh.kumar@example.com'', ''[{\"\"productName\"\": \"\"BHEL PURI 1.6 Kg\"\", \"\"productCode\"\": \"\"BP-1.6\"\", \"\"unit\"\": \"\"kg\"\", \"\"quantity\"\": 2, \"\"unitPrice\"\": 280, \"\"totalPrice\"\": 560, \"\"extractionConfidence\"\": 0.95}]'', 1, 2, 560, 100.80, 660.80, ''{\"\"subtotal\"\": 560, \"\"taxAmount\"\": 100.80, \"\"total\"\": 660.80}'', ''system'', 0.95, 0.92, false, ''document'');\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT id, order_number, customer_name, status, total_amount, extraction_confidence, data_quality_score FROM orders LIMIT 5;\")",
      "Bash(npm i:*)",
      "Bash(\"C:\\code\\mangalm\\scripts\\windows\\start-all.bat\")",
      "Bash(set PORT=3001)",
      "Bash(set PORT=3007)",
      "Bash(npm uninstall:*)",
      "Bash(start http://localhost:3000/dashboard)",
      "Bash(start test-upload.html)",
      "Bash(start \"Sales Frontend\" cmd /c \"npm start\")",
      "Bash(start test-direct-upload.html)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT COUNT(*) as total_orders FROM orders\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT column_name FROM information_schema.columns WHERE table_name = ''orders'' ORDER BY ordinal_position\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"INSERT INTO orders (order_number, store_id, customer_name, status, items, item_count, total_quantity, subtotal_amount, tax_amount, total_amount, totals, source, created_by) VALUES (''UPLOAD-TEST-001'', ''4261931000001048015'', ''Upload Test'', ''pending'', ''[{\"\"productName\"\": \"\"Test Item\"\", \"\"quantity\"\": 1, \"\"unitPrice\"\": 100, \"\"totalPrice\"\": 100}]'', 1, 1, 100, 18, 118, ''{\"\"subtotal\"\": 100, \"\"tax\"\": 18, \"\"total\"\": 118}'', ''document'', ''test'') RETURNING id, order_number\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT enum_range(NULL::order_status)\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"INSERT INTO orders (order_number, store_id, customer_name, status, items, item_count, total_quantity, subtotal_amount, tax_amount, total_amount, totals, source, created_by, notes) VALUES (''UPLOAD-TEST-002'', ''4261931000001048015'', ''Document Upload Test'', ''pending_review'', ''[{\"\"productName\"\": \"\"Samosa\"\", \"\"quantity\"\": 100, \"\"unitPrice\"\": 12, \"\"totalPrice\"\": 1200}]'', 1, 100, 1200, 216, 1416, ''{\"\"subtotal\"\": 1200, \"\"tax\"\": 216, \"\"total\"\": 1416}'', ''document'', ''upload-test'', ''Created from document upload test'') RETURNING id, order_number\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT order_number, customer_name, total_amount, status, created_at FROM orders WHERE source = ''document'' OR notes LIKE ''%upload%'' ORDER BY created_at DESC LIMIT 5\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT COUNT(*) FROM orders\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT id, order_number, store_id, customer_name, total_amount, source, status, created_at FROM orders WHERE source = ''document'' ORDER BY created_at DESC LIMIT 10\")",
      "Bash(start \"API Gateway\" cmd /c \"set PORT=3007 && npm start\")",
      "Bash(start test-upload-final.html)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT id, order_number, store_id, total_amount, source, status FROM orders WHERE order_number = ''ORD-1755894495352-OFOBJ''\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT COUNT(*) as total_orders, COUNT(CASE WHEN source = ''document'' THEN 1 END) as document_orders FROM orders WHERE store_id = ''4261931000001048015''\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT COUNT(*) as total_orders, COUNT(CASE WHEN source = ''document'' THEN 1 END) as document_orders FROM orders WHERE store_id = ''4261931000001048015'' AND created_at > NOW() - INTERVAL ''1 hour''\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT id, order_number, store_id, customer_name, total_amount, source, status, created_at FROM orders WHERE source = ''document'' ORDER BY created_at DESC LIMIT 5\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT COUNT(*) as total_orders FROM orders WHERE source = ''document''\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT id, order_number FROM orders WHERE source = ''document'' LIMIT 1\" -t)",
      "Bash(start \"API Gateway\" cmd /c \"cd services/api-gateway && set PORT=3007 && npm start\")",
      "Bash(start \"Sales Frontend\" cmd /c \"cd services/sales-frontend && set PORT=3001 && npm start\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT id, order_number, store_id, customer_name, total_amount, source, status FROM orders WHERE source = ''document'' ORDER BY created_at DESC LIMIT 5\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT id, order_number FROM orders WHERE id = ''ef225038-75a6-4f3a-ae49-7d70e00c6bf9''\")",
      "Bash(start http://localhost:3001)",
      "Bash(npx serve:*)",
      "Bash(set REACT_APP_API_GATEWAY_URL=http://localhost:3008)",
      "Bash(set BROWSER=none)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT COUNT(*) FROM orders\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT id, order_number, source FROM orders LIMIT 5\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"DELETE FROM orders\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT COUNT(*) FROM orders\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT COUNT(*) FROM stores\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT COUNT(*) FROM historical_invoices\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"DELETE FROM historical_invoices\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"DELETE FROM invoice_items; DELETE FROM historical_invoices;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT COUNT(*) FROM historical_invoices; SELECT COUNT(*) FROM orders;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"\\dt\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT ''predicted_orders'' as table_name, COUNT(*) as count FROM predicted_orders UNION ALL SELECT ''call_prioritization'', COUNT(*) FROM call_prioritization UNION ALL SELECT ''stores'', COUNT(*) FROM stores UNION ALL SELECT ''orders'', COUNT(*) FROM orders UNION ALL SELECT ''historical_invoices'', COUNT(*) FROM historical_invoices;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"DELETE FROM predicted_order_items; DELETE FROM predicted_orders; DELETE FROM call_prioritization;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT ''predicted_orders'' as table_name, COUNT(*) as count FROM predicted_orders UNION ALL SELECT ''call_prioritization'', COUNT(*) FROM call_prioritization UNION ALL SELECT ''orders'', COUNT(*) FROM orders;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -f \"C:\\code\\mangalm\\database\\migrations\\010_create_product_validation.sql\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"\\d invoice_items\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT COUNT(*) FROM products; SELECT id, name FROM products LIMIT 5;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"DROP VIEW IF EXISTS known_products CASCADE; DROP FUNCTION IF EXISTS is_valid_product CASCADE; DROP FUNCTION IF EXISTS get_unknown_products CASCADE; DROP FUNCTION IF EXISTS validate_predicted_order_products CASCADE; DROP FUNCTION IF EXISTS validate_order_products CASCADE; DROP FUNCTION IF EXISTS get_product_catalog CASCADE; DROP VIEW IF EXISTS product_alerts_summary CASCADE;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"\\d products\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT COUNT(*) as total_products FROM known_products; SELECT product_name FROM known_products LIMIT 5;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT is_valid_product(''Samosa'');\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT is_valid_product(''Bikaneri Bhujia 1 Kg'');\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -f \"C:\\code\\mangalm\\database\\migrations\\011_fix_product_validation_empty_start.sql\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"DELETE FROM invoice_items; DELETE FROM products;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT * FROM validation_statistics;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"INSERT INTO orders (id, order_number, store_id, customer_name, items, total_amount, status, source) VALUES (gen_random_uuid(), ''TEST-001'', ''4261931000001048015'', ''Test Customer'', ''[{\"\"product_name\"\": \"\"Samosa\"\", \"\"quantity\"\": 10, \"\"unitPrice\"\": 12}, {\"\"product_name\"\": \"\"Chai\"\", \"\"quantity\"\": 5, \"\"unitPrice\"\": 20}]''::jsonb, 220, ''pending'', ''test'') RETURNING id, order_number;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT enum_range(NULL::order_status);\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"INSERT INTO orders (id, order_number, store_id, customer_name, items, total_amount, status, source) VALUES (gen_random_uuid(), ''TEST-001'', ''4261931000001048015'', ''Test Customer'', ''[{\"\"product_name\"\": \"\"Samosa\"\", \"\"quantity\"\": 10, \"\"unitPrice\"\": 12}, {\"\"product_name\"\": \"\"Chai\"\", \"\"quantity\"\": 5, \"\"unitPrice\"\": 20}]''::jsonb, 220, ''pending_review'', ''test'') RETURNING id, order_number;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"INSERT INTO orders (id, order_number, store_id, customer_name, items, item_count, total_quantity, subtotal_amount, tax_amount, total_amount, status, source, created_by, notes) VALUES (gen_random_uuid(), ''TEST-001'', ''4261931000001048015'', ''Test Customer'', ''[{\"\"product_name\"\": \"\"Samosa\"\", \"\"quantity\"\": 10, \"\"unitPrice\"\": 12, \"\"totalPrice\"\": 120}, {\"\"product_name\"\": \"\"Chai\"\", \"\"quantity\"\": 5, \"\"unitPrice\"\": 20, \"\"totalPrice\"\": 100}]''::jsonb, 2, 15, 220, 39.60, 259.60, ''pending_review'', ''test'', ''verification-test'', ''Testing learning mode'') RETURNING id, order_number;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"INSERT INTO orders (order_number, store_id, customer_name, items, item_count, total_quantity, subtotal_amount, tax_amount, total_amount, totals, status, source, created_by, notes) VALUES (''TEST-001'', ''4261931000001048015'', ''Test Customer'', ''[{\"\"product_name\"\": \"\"Samosa\"\", \"\"quantity\"\": 10, \"\"unitPrice\"\": 12, \"\"totalPrice\"\": 120}, {\"\"product_name\"\": \"\"Chai\"\", \"\"quantity\"\": 5, \"\"unitPrice\"\": 20, \"\"totalPrice\"\": 100}]''::jsonb, 2, 15, 220, 39.60, 259.60, ''{\"\"subtotal\"\": 220, \"\"tax\"\": 39.60, \"\"total\"\": 259.60}''::jsonb, ''pending_review'', ''test'', ''verification'', ''Step 2: Testing learning mode'') RETURNING id, order_number, manual_verification_required;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT alert_type, product_name, severity, is_resolved, is_learned FROM product_alerts WHERE created_at > NOW() - INTERVAL ''5 minutes'';\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT notes FROM orders WHERE order_number = ''TEST-001'';\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"UPDATE orders SET status = ''confirmed'' WHERE order_number = ''TEST-001'';\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"DROP TRIGGER IF EXISTS learn_products_on_confirmation ON orders; CREATE OR REPLACE FUNCTION trigger_learn_from_order() RETURNS TRIGGER AS $$ BEGIN IF NEW.status IN (''confirmed'', ''delivered'') AND (OLD.status IS NULL OR OLD.status NOT IN (''confirmed'', ''delivered'')) THEN PERFORM learn_products_from_order(NEW.id); END IF; RETURN NEW; END; $$ LANGUAGE plpgsql; CREATE TRIGGER learn_products_on_confirmation AFTER UPDATE ON orders FOR EACH ROW EXECUTE FUNCTION trigger_learn_from_order();\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"UPDATE orders SET status = ''confirmed'' WHERE order_number = ''TEST-001'' RETURNING status;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT alert_type, product_name, severity, is_resolved, is_learned, resolution_notes FROM product_alerts WHERE created_at > NOW() - INTERVAL ''10 minutes'';\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT COUNT(*) FROM known_products; SELECT product_name FROM known_products;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"INSERT INTO predicted_orders (store_id, predicted_date, items, confidence, total_amount, status) VALUES (''4261931000001048015'', CURRENT_DATE + 1, ''[{\"\"product_name\"\": \"\"Samosa\"\", \"\"quantity\"\": 20}, {\"\"product_name\"\": \"\"Chai\"\", \"\"quantity\"\": 10}, {\"\"product_name\"\": \"\"Bhel Puri\"\", \"\"quantity\"\": 5}]''::jsonb, 0.85, 500, ''pending'') RETURNING id, manual_verification_required;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"ALTER TABLE predicted_orders ADD COLUMN IF NOT EXISTS items JSONB; ALTER TABLE predicted_orders ADD COLUMN IF NOT EXISTS manual_verification_required BOOLEAN DEFAULT FALSE; ALTER TABLE predicted_orders ADD COLUMN IF NOT EXISTS notes TEXT;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"INSERT INTO predicted_orders (store_id, predicted_date, items, confidence, total_amount, status) VALUES (''4261931000001048015'', CURRENT_DATE + 1, ''[{\"\"product_name\"\": \"\"Samosa\"\", \"\"quantity\"\": 20}, {\"\"product_name\"\": \"\"Chai\"\", \"\"quantity\"\": 10}, {\"\"product_name\"\": \"\"Bhel Puri\"\", \"\"quantity\"\": 5}]''::jsonb, 0.85, 500, ''pending'') RETURNING id, manual_verification_required, notes;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT alert_type, product_name, severity, source_type FROM product_alerts WHERE source_type = ''prediction'' ORDER BY created_at DESC LIMIT 5;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"INSERT INTO orders (order_number, store_id, customer_name, items, item_count, total_quantity, subtotal_amount, tax_amount, total_amount, totals, status, source) VALUES (''TEST-002'', ''4261931000001048015'', ''Test 2'', ''[{\"\"product_name\"\": \"\"Bhel Puri\"\", \"\"quantity\"\": 5}, {\"\"product_name\"\": \"\"Pani Puri\"\", \"\"quantity\"\": 10}, {\"\"product_name\"\": \"\"Sev Puri\"\", \"\"quantity\"\": 8}]''::jsonb, 3, 23, 460, 82.8, 542.8, ''{}''::jsonb, ''confirmed'', ''test'') RETURNING order_number;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"INSERT INTO orders (order_number, store_id, customer_name, items, item_count, total_quantity, subtotal_amount, tax_amount, total_amount, totals, status, source, created_by) VALUES (''TEST-002'', ''4261931000001048015'', ''Test 2'', ''[{\"\"product_name\"\": \"\"Bhel Puri\"\", \"\"quantity\"\": 5}, {\"\"product_name\"\": \"\"Pani Puri\"\", \"\"quantity\"\": 10}, {\"\"product_name\"\": \"\"Sev Puri\"\", \"\"quantity\"\": 8}]''::jsonb, 3, 23, 460, 82.8, 542.8, ''{}''::jsonb, ''confirmed'', ''test'', ''test'') RETURNING order_number;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT COUNT(*) as total, STRING_AGG(product_name, '', '' ORDER BY product_name) as products FROM known_products;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT * FROM revalidate_all_predictions();\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"CREATE OR REPLACE FUNCTION revalidate_all_predictions() RETURNS TABLE(prediction_id UUID, pred_store_id VARCHAR, products_validated INTEGER, unknown_products INTEGER, status TEXT) AS $$ DECLARE v_prediction RECORD; v_unknown_count INTEGER; v_total_count INTEGER; BEGIN DELETE FROM product_alerts WHERE source_type = ''prediction'' AND alert_type = ''revalidation'' AND created_at < CURRENT_TIMESTAMP - INTERVAL ''1 hour''; FOR v_prediction IN SELECT po.id, po.store_id, po.items FROM predicted_orders po WHERE po.status = ''pending'' LOOP SELECT COUNT(*) as total, COUNT(CASE WHEN is_unknown THEN 1 END) as unknown INTO v_total_count, v_unknown_count FROM get_unknown_products(v_prediction.items); UPDATE predicted_orders SET manual_verification_required = (v_unknown_count > 0 AND get_validation_mode() = ''strict''), notes = FORMAT(''Revalidated: %s/%s products known'', v_total_count - v_unknown_count, v_total_count) WHERE id = v_prediction.id; RETURN QUERY SELECT v_prediction.id, v_prediction.store_id::VARCHAR, v_total_count, v_unknown_count, CASE WHEN v_unknown_count = 0 THEN ''valid'' WHEN get_validation_mode() = ''learning'' THEN ''learning'' ELSE ''needs_review'' END::TEXT; END LOOP; END; $$ LANGUAGE plpgsql;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"DROP FUNCTION revalidate_all_predictions(); CREATE FUNCTION revalidate_all_predictions() RETURNS TABLE(prediction_id UUID, store_id VARCHAR, products_validated INTEGER, unknown_products INTEGER, status TEXT) AS $$ DECLARE v_prediction RECORD; v_unknown_count INTEGER; v_total_count INTEGER; BEGIN DELETE FROM product_alerts WHERE source_type = ''prediction'' AND alert_type = ''revalidation'' AND created_at < CURRENT_TIMESTAMP - INTERVAL ''1 hour''; FOR v_prediction IN SELECT po.id, po.store_id, po.items FROM predicted_orders po WHERE po.status = ''pending'' LOOP SELECT COUNT(*) as total, COUNT(CASE WHEN is_unknown THEN 1 END) as unknown INTO v_total_count, v_unknown_count FROM get_unknown_products(v_prediction.items); UPDATE predicted_orders SET manual_verification_required = (v_unknown_count > 0 AND get_validation_mode() = ''strict''), notes = FORMAT(''Revalidated: %s/%s products known'', v_total_count - v_unknown_count, v_total_count) WHERE id = v_prediction.id; RETURN QUERY SELECT v_prediction.id, v_prediction.store_id::VARCHAR, v_total_count, v_unknown_count, CASE WHEN v_unknown_count = 0 THEN ''valid'' WHEN get_validation_mode() = ''learning'' THEN ''learning'' ELSE ''needs_review'' END::TEXT; END LOOP; END; $$ LANGUAGE plpgsql;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT * FROM revalidate_all_predictions();\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT notes, manual_verification_required FROM predicted_orders WHERE id = ''aef3676c-286a-47cb-9d34-e1f96f84b4d3'';\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"UPDATE system_config SET value = ''strict'' WHERE key = ''product_validation_mode'' RETURNING key, value;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"INSERT INTO predicted_orders (store_id, predicted_date, items, confidence, total_amount, status) VALUES (''4261931000001048015'', CURRENT_DATE + 2, ''[{\"\"product_name\"\": \"\"Samosa\"\", \"\"quantity\"\": 15}, {\"\"product_name\"\": \"\"Vada Pav\"\", \"\"quantity\"\": 10}]''::jsonb, 0.75, 350, ''pending'') RETURNING id, manual_verification_required, notes;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT alert_type, product_name, severity, alert_message FROM product_alerts WHERE product_name = ''Vada Pav'';\")",
      "Bash(npm rebuild:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT COUNT(*) FROM stores\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"DELETE FROM orders; DELETE FROM predicted_order_items; DELETE FROM predicted_orders; DELETE FROM call_prioritization;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT COUNT(*) as orders_count FROM orders; SELECT COUNT(*) as predicted_orders_count FROM predicted_orders; SELECT COUNT(*) as calls_count FROM call_prioritization;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"DELETE FROM orders; DELETE FROM predicted_order_items; DELETE FROM predicted_orders; DELETE FROM call_prioritization; DELETE FROM invoice_items; DELETE FROM historical_invoices; DELETE FROM stores; DELETE FROM products;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d mangalm_sales -c \"SELECT ''stores'' as table_name, COUNT(*) as count FROM stores UNION ALL SELECT ''products'', COUNT(*) FROM products UNION ALL SELECT ''orders'', COUNT(*) FROM orders UNION ALL SELECT ''historical_invoices'', COUNT(*) FROM historical_invoices UNION ALL SELECT ''predicted_orders'', COUNT(*) FROM predicted_orders;\")",
      "Bash(gcloud config get-value:*)",
      "Bash(gcloud services enable:*)",
      "Bash(gcloud auth:*)",
      "Bash(gcloud config set:*)",
      "Bash(gcloud builds submit:*)",
      "Bash(set REACT_APP_API_GATEWAY_URL=http://localhost:3007)",
      "Bash(start http://localhost:3001/upload)",
      "Bash(start http://localhost:3000/upload)",
      "Bash(npm ci:*)"
    ],
    "deny": []
  }
}