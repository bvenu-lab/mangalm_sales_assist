/**
 * Script to trigger AI predictions and populate prediction tables
 * Run this after importing CSV data
 */

const { Pool } = require('pg');
const axios = require('axios');

const pool = new Pool({
  host: 'localhost',
  port: 3432,
  database: 'mangalm_sales',
  user: 'postgres',
  password: 'postgres'
});

async function generatePredictions() {
  try {
    console.log('Starting prediction generation...');
    
    // Get all unique store IDs from orders
    const storesQuery = `
      SELECT DISTINCT store_id 
      FROM orders 
      WHERE store_id IS NOT NULL
    `;
    const storesResult = await pool.query(storesQuery);
    const storeIds = storesResult.rows.map(row => row.store_id);
    
    console.log(`Found ${storeIds.length} stores to generate predictions for`);
    
    // Generate predictions for each store
    for (const storeId of storeIds) {
      try {
        // Call AI prediction service
        const predictionResponse = await axios.post(
          'http://localhost:3006/api/predictions/order',
          {
            storeId,
            includeItems: true
          },
          {
            timeout: 10000,
            headers: {
              'Content-Type': 'application/json'
            }
          }
        );
        
        if (predictionResponse.data.success && predictionResponse.data.data) {
          const prediction = predictionResponse.data.data;
          
          // Insert prediction into database
          const insertPredictionQuery = `
            INSERT INTO predicted_orders (
              id, store_id, predicted_date, confidence, 
              total_amount, status, items, notes, created_at
            ) VALUES (
              gen_random_uuid(), $1, $2, $3, $4, $5, $6, $7, NOW()
            )
            RETURNING id
          `;
          
          const predictedDate = new Date();
          predictedDate.setDate(predictedDate.getDate() + 7); // Predict 7 days ahead
          
          const values = [
            storeId,
            predictedDate,
            prediction.confidence || 0.85,
            prediction.totalAmount || 1000,
            'pending',
            JSON.stringify(prediction.items || []),
            'Generated by AI prediction service'
          ];
          
          const result = await pool.query(insertPredictionQuery, values);
          console.log(`✓ Prediction created for store ${storeId}: ${result.rows[0].id}`);
          
          // Also create call prioritization entry
          const callPriorityQuery = `
            INSERT INTO call_prioritization (
              id, store_id, priority_score, last_contact_date,
              recommended_action, status, created_at
            ) VALUES (
              gen_random_uuid(), $1, $2, $3, $4, $5, NOW()
            )
            ON CONFLICT (store_id) 
            DO UPDATE SET 
              priority_score = EXCLUDED.priority_score,
              recommended_action = EXCLUDED.recommended_action,
              updated_at = NOW()
          `;
          
          await pool.query(callPriorityQuery, [
            storeId,
            Math.random() * 100, // Random priority score
            new Date(),
            'Follow up on predicted order',
            'pending'
          ]);
          
        }
      } catch (error) {
        console.error(`Failed to generate prediction for store ${storeId}:`, error.message);
      }
    }
    
    // Generate some sample upselling recommendations
    console.log('\nGenerating upselling recommendations...');
    
    const ordersQuery = `
      SELECT id, store_id, items 
      FROM orders 
      LIMIT 10
    `;
    const ordersResult = await pool.query(ordersQuery);
    
    for (const order of ordersResult.rows) {
      try {
        // Parse items and generate recommendations
        const items = typeof order.items === 'string' ? JSON.parse(order.items) : order.items;
        const recommendations = [];
        
        // Simple rule-based recommendations
        for (const item of items) {
          if (item.productName && item.productName.toLowerCase().includes('samosa')) {
            recommendations.push({
              product: 'Chai',
              reason: 'Popular combo with Samosa',
              confidence: 0.9
            });
          }
          if (item.productName && item.productName.toLowerCase().includes('bhel')) {
            recommendations.push({
              product: 'Sev Puri',
              reason: 'Customers who buy Bhel often buy Sev Puri',
              confidence: 0.75
            });
          }
        }
        
        if (recommendations.length > 0) {
          console.log(`✓ Generated ${recommendations.length} recommendations for order ${order.id}`);
        }
      } catch (error) {
        console.error(`Failed to generate recommendations for order ${order.id}:`, error.message);
      }
    }
    
    console.log('\nPrediction generation completed!');
    
    // Show summary
    const summaryQuery = `
      SELECT 
        (SELECT COUNT(*) FROM predicted_orders) as predictions_count,
        (SELECT COUNT(*) FROM call_prioritization) as calls_count,
        (SELECT COUNT(*) FROM orders) as orders_count
    `;
    const summary = await pool.query(summaryQuery);
    console.log('\nDatabase Summary:');
    console.log(`- Orders: ${summary.rows[0].orders_count}`);
    console.log(`- Predictions: ${summary.rows[0].predictions_count}`);
    console.log(`- Call Priorities: ${summary.rows[0].calls_count}`);
    
  } catch (error) {
    console.error('Error generating predictions:', error);
  } finally {
    await pool.end();
  }
}

// Run the script
generatePredictions();