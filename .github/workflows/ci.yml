name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 0 * * 0' # Weekly security scan

env:
  NODE_VERSION: '18.x'
  POSTGRES_VERSION: '14'

jobs:
  # Security Scanning
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate
          cd services/ai-prediction-service && npm audit
          cd ../api-gateway && npm audit
          cd ../sales-frontend && npm audit
          cd ../zoho-integration && npm audit
      
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium

  # Code Quality
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Run ESLint
        run: |
          npx eslint . --ext .ts,.tsx,.js,.jsx --format json --output-file eslint-report.json || true
      
      - name: Run Prettier check
        run: npx prettier --check "**/*.{ts,tsx,js,jsx,json,css,md}"
      
      - name: TypeScript type checking
        run: |
          cd services/ai-prediction-service && npx tsc --noEmit || true
          cd ../api-gateway && npx tsc --noEmit
          cd ../sales-frontend && npx tsc --noEmit || true
          cd ../zoho-integration && npx tsc --noEmit || true
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ai-prediction-service, api-gateway, zoho-integration, sales-frontend]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          cd services/${{ matrix.service }}
          npm ci --legacy-peer-deps
      
      - name: Run unit tests
        run: |
          cd services/${{ matrix.service }}
          npm run test:ci -- --coverage || true
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./services/${{ matrix.service }}/coverage/lcov.info
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: mangalm
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: mangalm_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://mangalm:test_password@localhost:5432/mangalm_test
        run: |
          cd database
          npm run migrate:test
      
      - name: Start services
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://mangalm:test_password@localhost:5432/mangalm_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_secret_key
        run: |
          cd services/api-gateway && npm start &
          cd services/ai-prediction-service && npm start &
          sleep 10
      
      - name: Run integration tests
        run: npm run test:integration

  # E2E Tests
  e2e-tests:
    name: E2E Tests with Cypress
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Build frontend
        run: |
          cd services/sales-frontend
          npm run build || true
      
      - name: Run Cypress E2E tests
        uses: cypress-io/github-action@v5
        with:
          start: |
            npm run start:test:backend
            npm run start:test:frontend
          wait-on: 'http://localhost:3000, http://localhost:3007/health'
          wait-on-timeout: 120
          browser: chrome
          record: true
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      - name: Start services
        run: |
          docker-compose up -d
          sleep 30
      
      - name: Run k6 load tests
        run: |
          k6 run tests/performance/k6-load-test.js \
            --out json=performance-results.json \
            --summary-export=summary.json
      
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            performance-results.json
            summary.json
      
      - name: Check performance thresholds
        run: |
          node scripts/check-performance-thresholds.js

  # Build and Push Docker Images
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    strategy:
      matrix:
        service: [ai-prediction-service, api-gateway, zoho-integration]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./services/${{ matrix.service }}
          push: true
          tags: |
            mangalm/${{ matrix.service }}:latest
            mangalm/${{ matrix.service }}:${{ github.sha }}
          cache-from: type=registry,ref=mangalm/${{ matrix.service }}:buildcache
          cache-to: type=registry,ref=mangalm/${{ matrix.service }}:buildcache,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, unit-tests, integration-tests, e2e-tests, docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging..."
          # Add deployment scripts here
      
      - name: Run smoke tests
        run: |
          npm run test:smoke:staging

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, unit-tests, integration-tests, e2e-tests, performance-tests, docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://mangalm.example.com
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy to production environment
        run: |
          echo "Deploying to production..."
          # Add production deployment scripts here
      
      - name: Run smoke tests
        run: |
          npm run test:smoke:production
      
      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment completed!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()